{"version":3,"file":"static/js/241.cbc61351.chunk.js","mappings":"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","sources":["types/Sex.ts","utils/centuries.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/PersonInfo.tsx","components/PeopleTable.tsx","utils/filterPeople.tsx","components/PeoplePage.tsx"],"sourcesContent":["export enum Sex{\n  ALL = 'All',\n  MALE = 'Male',\n  FEMALE = 'Female',\n}\n","export const Centuries = ['16', '17', '18', '19', '20'];\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { URLSearchParamsInit } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Centuries } from '../utils/centuries';\nimport { Sex } from '../types/Sex';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\ntype Props = {\n  searchParams: URLSearchParams;\n  setSearchParams: (newParams: URLSearchParamsInit,\n    navigateOptions?: {\n      replace?: boolean;\n      state?: unknown;\n    } | undefined) => void;\n  query: string;\n  sex: string;\n  centuries: string[];\n};\n\nexport const PeopleFilters: React.FC<Props> = ({\n  searchParams,\n  setSearchParams,\n  query,\n  sex,\n  centuries,\n}) => {\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.value.trim()) {\n      return;\n    }\n\n    setSearchParams(\n      getSearchWith(searchParams, { query: e.target.value || null }),\n    );\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames(\n            { 'is-active': !sex },\n          )}\n        >\n          {Sex.ALL}\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames(\n            { 'is-active': sex === 'm' },\n          )}\n        >\n          {Sex.MALE}\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames(\n            { 'is-active': sex === 'f' },\n          )}\n        >\n          {Sex.FEMALE}\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query || ''}\n            onChange={onInputChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {Centuries.map(century => (\n              <SearchLink\n                key={century}\n                params={{\n                  centuries: centuries.includes(century.toString())\n                    ? centuries.filter(c => c !== century.toString())\n                    : [...centuries, century],\n                }}\n                data-cy=\"century\"\n                className={classNames('button', 'mr-1',\n                  { 'is-info': centuries.includes(century.toString()) })}\n              >\n                {century}\n              </SearchLink>\n            ))}\n\n            <div className=\"level-right ml-4\">\n              <SearchLink\n                params={{\n                  centuries: null,\n                }}\n                data-cy=\"centuryALL\"\n                className={classNames(\n                  'button',\n                  { 'is-success': !centuries.length },\n                  { 'is-outlined': centuries.length },\n                )}\n              >\n                All\n              </SearchLink>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n          }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import classNames from 'classnames';\nimport { Link, useLocation, useResolvedPath } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n  slug:string\n};\n\nexport const PersonInfo: React.FC<Props> = ({ person, slug }) => {\n  const location = useLocation();\n  const parentPath = useResolvedPath('../').pathname;\n  const isSelectedPerson = (personSlug: string) => personSlug === slug;\n  const {\n    name,\n    sex,\n    born,\n    died,\n    motherName,\n    mother,\n    father,\n    fatherName,\n    slug: personSlug,\n  } = person;\n\n  const mom = motherName || '-';\n  const dad = fatherName || '-';\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': isSelectedPerson(personSlug),\n      })}\n    >\n      <td>\n        <Link\n          to={{\n            pathname: isSelectedPerson(personSlug)\n              ? parentPath : parentPath + personSlug,\n            search: location.search,\n          }}\n          className={classNames({ 'has-text-danger': sex === 'f' })}\n        >\n          {name}\n        </Link>\n      </td>\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <Link\n            to={{\n              pathname: isSelectedPerson(mother.slug)\n                ? parentPath : parentPath + mother.slug,\n              search: location.search,\n            }}\n            className=\"has-text-danger\"\n          >\n            {mother.name}\n          </Link>\n        ) : (\n          mom\n        )}\n      </td>\n      <td>\n        {father ? (\n          <Link\n            to={`../${father.slug}`}\n          >\n            {father.name}\n          </Link>\n        ) : (\n          dad\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { Person } from '../types';\nimport { PersonInfo } from './PersonInfo';\n\ntype Props = {\n  people: Person[],\n  slug: string,\n};\n\nexport const PeopleTable:React.FC<Props> = ({ people, slug }) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <a href=\"#/people?sort=name\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <a href=\"#/people?sort=sex\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <a href=\"#/people?sort=born&amp;order=desc\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort-up\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <a href=\"#/people?sort=died\">\n                <span className=\"icon\">\n                  <i className=\"fas fa-sort\" />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonInfo\n            person={person}\n            key={person.slug}\n            slug={slug}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from '../types';\n\nconst normalizer = (text: string) => text.toLowerCase();\n\nexport const filterPeople = (searchQuery: string,\n  sex: string,\n  century: string[],\n  people: Person[]) => {\n  const query = normalizer(searchQuery).trim();\n  let peopleToFilter = [...people];\n\n  if (query) {\n    peopleToFilter = peopleToFilter.filter(\n      person => normalizer(person.name).includes(query)\n        || (person.motherName && normalizer(person.motherName).includes(query))\n        || (person.fatherName && normalizer(\n          person.fatherName,\n        ).includes(query)),\n    );\n  }\n\n  if (century.length) {\n    peopleToFilter = peopleToFilter.filter(person => {\n      const personCentury = Math.ceil(person.born / 100).toString();\n\n      if (century.includes(personCentury)) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  if (sex) {\n    peopleToFilter = peopleToFilter.filter(person => person.sex === sex);\n  }\n\n  return peopleToFilter;\n};\n","/* eslint-disable max-len */\nimport axios from 'axios';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { filterPeople } from '../utils/filterPeople';\n\nconst PeoplePage = () => {\n  const [peopleData, setPeopleData] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const isMounted = useRef(false);\n\n  const [serachParams, setSearchParams] = useSearchParams();\n  const query = serachParams.get('query') || '';\n  const sex = serachParams.get('sex') || '';\n  const centuries = serachParams.getAll('centuries') || [];\n\n  const { slug = '' } = useParams();\n\n  const getPeopleFromServer = async () => {\n    const controller = new AbortController();\n\n    try {\n      setIsLoading(true);\n      setIsError(false);\n      const { data } = await axios.get<Person[]>('https://mate-academy.github.io/react_people-table/api/people.json', {\n        signal: controller.signal,\n      });\n\n      if (isMounted) {\n        if (data.length) {\n          const dataWithParents = data.map(person => {\n            return {\n              ...person,\n              mother: data.find(human => human.name === person.motherName),\n              father: data.find(human => human.name === person.fatherName),\n            };\n          });\n\n          setPeopleData(dataWithParents);\n        }\n      }\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    isMounted.current = true;\n    setTimeout(getPeopleFromServer, 500);\n\n    return () => {\n      setPeopleData([]);\n      isMounted.current = false;\n    };\n  }, []);\n\n  const visiblePersons = useMemo(() => {\n    return filterPeople(query, sex, centuries, peopleData);\n  }, [query, sex, centuries]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {peopleData.length > 0 && (\n              <PeopleFilters\n                searchParams={serachParams}\n                setSearchParams={setSearchParams}\n                query={query}\n                sex={sex}\n                centuries={centuries}\n              />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isError && !isLoading && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!peopleData.length && !isLoading && !isError && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!isLoading && !visiblePersons.length && !isError && (\n                <p>There are no people matching the current search criteria</p>)}\n\n              {peopleData.length > 0 && <PeopleTable people={visiblePersons} slug={slug} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PeoplePage;\n"],"names":["Sex","Centuries","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","PeopleFilters","setSearchParams","query","sex","centuries","className","classNames","ALL","MALE","FEMALE","type","placeholder","onChange","e","target","trim","map","century","includes","filter","c","length","PersonInfo","person","slug","location","useLocation","parentPath","useResolvedPath","pathname","isSelectedPerson","personSlug","name","born","died","motherName","mother","father","fatherName","mom","dad","PeopleTable","people","href","normalizer","text","toLowerCase","useState","peopleData","setPeopleData","isLoading","setIsLoading","isError","setIsError","isMounted","useRef","serachParams","get","getAll","useParams","getPeopleFromServer","controller","AbortController","axios","signal","data","dataWithParents","find","human","useEffect","current","setTimeout","visiblePersons","useMemo","searchQuery","peopleToFilter","personCentury","Math","ceil","filterPeople","Loader"],"sourceRoot":""}